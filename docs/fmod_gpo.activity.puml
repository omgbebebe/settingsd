@startuml

start

:boot;
note right
at boot time the <b>gpoA service unit</b>
will update and apply GPOs for machine
end note

:update machine's GPOs;
note right
after fetching a new policies container
it should be merged with default one
that was supplied by gpoA package
end note

:apply machine's GPOs;

:wait for user login;

fork
:login on TTY;
fork again
:sshd;
fork again
:display manager;
:sunscribe to a pam_gpo DBUS signal;
fork
:request auth;
fork again
while (PAM in progress)
:show new messages from PAM on screen;
endwhile (DONE)
:done;
detach
end fork
end fork

:PAM;
partition "PAM auth" {
:default modules;
}
partition "PAM session" {
:default modules;
:pam_loginuid.so;
note right
to route progress messages via DBUS
we need to obtain an unique routing key.
it may be generated by <b>pam_loginuid.so</b>
module
end note

:pam_gpo.so;
note right
this module will trigger the <b>settingsd</b>
DBUS service with <b>SESSIONID</b> that will be
used as a signal name which will be fired with
status messages from <b>gpoA</b> application
end note

partition pam_gpo {
:subscribe to the settingsd DBUS signal;
:start own DBUS service;
note right
this service is needed to reemmit a settingsd
progress signals, thus the display manager
can display an actual status of authentication
procedure and GPOs updating/applying
end note

:send <b>update</b> message to the fmod_gpo module;
fork
while (SIGNAL is SUCCESS or ERROR?)
:wait for DBUS signals;
:reemmit signal as own;
endwhile (YES)
:done;
detach
fork again
-> send gpo/update_for_me();
partition settingsd {
:get sender UID;
:fork <b>/usr/bin/gpoa update --uid=${UID}</b>;
-> thread stderr;
fork
:gpoA update policies;
fork again
while (stderr.readline())
:emit signal with message;
endwhile (EOF)
end fork
}
end fork
:do the same for <b>apply GPOs</b>;
}
}

end
@enduml
